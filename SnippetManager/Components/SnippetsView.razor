@inject ISnippetDataAccess _sdb
@inject AuthenticationStateProvider context
@inject UserManager<IdentityUser> UserManager;
@inject ClipboardService Clipboard

<MudContainer Fixed="true" Style="height:650px; position:relative">
    @if (_snippets == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (_snippets.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No records to show.</MudAlert>
        <MudFab Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="ToggleAddSnippetOverlay" Size="Size.Large"
                IconSize="Size.Medium" Label="Add Snippet" Class="ma-2" Style="outline:none" DisableRipple="true" />
        <MudOverlay @bind-Visible="addIsVisible" Absolute="true" DarkBackground="true" AutoClose="false">
            <AddSnippetView OnSnippetAdded="OnAdd" />
            <MudPaper Class="pa-4 justify-center mud-text-align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleAddSnippetOverlay" Class="mx-2">Close</MudButton>
            </MudPaper>
        </MudOverlay>
    }
    else
    {
        <MudTable Items="@_snippets" Dense="true" Hover="true" FixedHeader="true"
                  Filter="new Func<SnippetModel,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" Style="max-height:fit-content();position:relative;">
            <ToolBarContent>

                <MudFab Color="Color.Success" Icon="@Icons.Material.Filled.Add" OnClick="ToggleAddSnippetOverlay" Size="Size.Large"
                        IconSize="Size.Medium" Label="Add Snippet" Class="ma-2" Style="outline:none" DisableRipple="true" />

                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col style="width:55%;" />
                <col style="width:15%;" />
                <col style="width:10%;" />
                <col style="width:10%;" />
                <col style="width:10%;" />
            </ColGroup>
            <HeaderContent>
                <MudTh>Description</MudTh>
                <MudTh>Environment</MudTh>
                <MudTh>OS</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Description">@context.Name</MudTd>
                <MudTd DataLabel="Environment">@context.Environment.Name</MudTd>
                <MudTd DataLabel="OS">@context.OperatingSystem.Name</MudTd>
                <MudTd Style="text-align:right">
                    <MudTooltip Text="Show Code" Placement="Placement.Start">
                        <MudIconButton Icon="@Icons.Material.Rounded.Code" Size="Size.Small" OnClick="()=> GetValue(context.Code)" Style="outline:none"></MudIconButton>
                    </MudTooltip>
                </MudTd>
                <MudTd>
                    <MudTooltip Text="Edit this snippet" Placement="Placement.Start">
                        <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick="() => PopulateEdit(context)" Style="outline:none"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete this snippet" Placement="Placement.Start">
                        <MudIconButton Icon="@Icons.Material.Rounded.Delete" Size="Size.Small" OnClick="()=> PopulateDelete(context)" Style="outline:none"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                @if (_snippets.Count > 10)
                    {
                    <MudTablePager PageSizeOptions="numOfRowsPerPage" />
                    }
            </PagerContent>
        </MudTable>
        @*<MudSwitch @bind-Checked="@dense" Color="Color.Primary">Dense</MudSwitch>*@

        <MudOverlay @bind-Visible="isVisible" Absolute="true" DarkBackground="true" AutoClose="false">
            <MudDivider Class="m-2"></MudDivider>
            <MonacoEditor CssClass="editor-css-class" @ref="_editor" Id="code-editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="LoadCode"></MonacoEditor>
            <MudDivider Class="m-2"></MudDivider>
            <div class="input-group d-flex justify-content-center">
                <MudChip Color="Color.Error" OnClick="@ToggleOverlay">Close</MudChip>
                <MudChip Color="Color.Success" OnClick="@CopyToClipboard">@copy</MudChip>
            </div>
        </MudOverlay>

        <MudOverlay @bind-Visible="addIsVisible" Absolute="true" DarkBackground="true" AutoClose="false">
            <AddSnippetView OnSnippetAdded="OnAdd" />
            <MudPaper Class="pa-4 justify-center mud-text-align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleAddSnippetOverlay" Class="mx-2">Close</MudButton>
            </MudPaper>
        </MudOverlay>

        <MudOverlay @bind-Visible="EditIsVisible" Absolute="true" DarkBackground="true" AutoClose="false">
            <EditSnippetView snippet="@snippet" OnSnippetUpdated="OnUpdate" />
            <MudPaper Class="pa-4 justify-center mud-text-align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleEditSnippetOverlay" Class="mx-2">Close without save</MudButton>
            </MudPaper>
        </MudOverlay>
        <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
            <MessageContent>
                Deleting a snippet can <b><i>not</i></b> be undone!
            </MessageContent>
            <YesButton>
                <MudButton Style="outline:none;" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
            </YesButton>
            <CancelButton>
                <MudButton Style="outline:none;">Cancel</MudButton>
            </CancelButton>
        </MudMessageBox>

        @*<div class="row justify-content-md-center align-self-md-center" style="margin-top:5px;">
                <div class="col-md-auto" style="width:100%">
                    <MonacoEditor CssClass="editor-css-class" @ref="_editor" Id="code-editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="LoadCode"></MonacoEditor>
                </div>
            </div>*@
    }
</MudContainer>
@code {
    MudMessageBox mbox { get; set; }
    private string userID;
    private List<SnippetModel> _snippets;
    private string searchString = "";
    private SnippetModel selectedItem = null;
    private HashSet<SnippetModel> selectedItems = new HashSet<SnippetModel>();
    private MonacoEditor _editor { get; set; } = new MonacoEditor();
    private string code = "";
    private string copy = "Copy Code";
    int[] numOfRowsPerPage = new int[3] { 10, 15, 20 };
    private bool isVisible;
    private bool addIsVisible;
    private bool EditIsVisible;
    SnippetModel snippet;

    public void ToggleOverlay()
    {
        isVisible = !isVisible;
        StateHasChanged();
        copy = "Copy Code";
    }

    private void OnAdd()
    {
        _snippets = null;
        _snippets = _sdb.GetSnippetsById(userID).Result;
        StateHasChanged();
    }
    private void OnUpdate()
    {
        ToggleEditSnippetOverlay();
        _snippets = null;
        _snippets = _sdb.GetSnippetsById(userID).Result;
        StateHasChanged();
    }

    private async void PopulateDelete(SnippetModel snippet)
    {
        bool? result = await mbox.Show();
        if (result != null)
        {
            await _sdb.DeleteSnippet(snippet);
            OnAdd();
        }
    }

    private void ToggleAddSnippetOverlay()
    {
        addIsVisible = !addIsVisible;
        StateHasChanged();
    }

    private void PopulateEdit(SnippetModel snippet)
    {
        this.snippet = snippet;
        ToggleEditSnippetOverlay();
    }

    private void ToggleEditSnippetOverlay()
    {
        EditIsVisible = !EditIsVisible;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        userID = UserManager.GetUserId(context.GetAuthenticationStateAsync().Result.User);
        _snippets = await _sdb.GetSnippetsById(userID);
    }

    private bool FilterFunc(SnippetModel snippet)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (snippet.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (snippet.Environment.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (snippet.OperatingSystem.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{snippet.Code} {snippet.Name} {snippet.Environment.Name} {snippet.OperatingSystem.Name}".Contains(searchString))
            return true;
        return false;
    }

    private async Task GetValue(string code)
    {
        this.code = code;
        await _editor.SetValue(code);
        ToggleOverlay();
    }

    private async Task LoadCode()
    {
        await _editor.SetValue(code);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = false,
            Theme = "vs",
            Language = "csharp",
            GlyphMargin = true,
            AutoIndent = true,
            Contextmenu = true,
            FormatOnType = true,
            SmoothScrolling = true,
            ScrollBeyondLastLine = false,
            ReadOnly = true,
            DetectIndentation = true,
            Minimap = new EditorMinimapOptions { Enabled = false },
            SelectionClipboard = true,
        };
    }

    //async Task ReadFromClipboard()
    //{
    //    // Reading from the clipboard may be denied, so you must handle the exception
    //    try
    //    {
    //        //text = await Clipboard.ReadTextAsync();
    //    }
    //    catch
    //    {
    //        Console.WriteLine("Cannot read from clipboard");
    //    }
    //}

    async Task CopyToClipboard()
    {
        // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await Clipboard.WriteTextAsync(code);
            copy = "Copied!";
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
}


